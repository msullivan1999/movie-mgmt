/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ticket;

import java.text.SimpleDateFormat;
import ticket.lib.*;
import ticket.Movie;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.*;

public class App {
    public static final String resourcesDir = "src" + File.separator + "main" + File.separator + "resources";

    User currentUser;
    ArrayList<User> users;
    ArrayList<Cinema> cinemas;
    ArrayList<Movie> movies;
    ArrayList<Showing> movieShowings;
    SimpleDateFormat df = new SimpleDateFormat("yyyy/MM/dd");
    String formatted = df.format(new Date());
    ArrayList<GiftCard> giftCards;


    public App(){
        currentUser = null; //Add stay logged in later
        this.users = User.initialiseUsers(resourcesDir, User.userFileName);
        this.cinemas = initialiseCinemas();
        this.movies = initialiseMovies();
        this.movieShowings = initialiseMovieShowings(); //Make sure showings is after cinemas
        this.giftCards = initialiseGiftCards();
    }

    private ArrayList<Showing> initialiseMovieShowings(){
        //Initialise list
        ArrayList<Showing> showingList = new ArrayList<>();

        //Get file path
        String path = getRequiredPath(resourcesDir, "movieShowings.csv");

        //Start reading file
        try (BufferedReader br = new BufferedReader(new FileReader(path))) {
            String line;

            //For each line in the file
            while ((line = br.readLine()) != null) {
                //Get each entry
                String[] lineValues = line.split(",");
                List<String> currentValues = Arrays.asList(lineValues);

                if (currentValues.size() != 7 ){
                    //If the current line is not valid
                    System.out.println("A line in showing file has an error");
                } else{
                    try{
                        //add the showing from the line
                        String time = lineValues[0];
                        int movieID = Integer.parseInt(lineValues[1]);
                        int cinemaID = Integer.parseInt(lineValues[2]);
                        int cinemaRoomNumber = Integer.parseInt(lineValues[3]);
                        int fSeats = Integer.parseInt(lineValues[4]);
                        int mSeats = Integer.parseInt(lineValues[5]);
                        int bSeats = Integer.parseInt(lineValues[6]);
                        Cinema c = Cinema.getCinemaWithID(cinemas, cinemaID);
                        Cinema.ScreenType sct = Cinema.getScreenTypeOfRoomNumber(c, cinemaRoomNumber);
                        showingList.add(new Showing(time, movieID, cinemaID, cinemaRoomNumber, sct, fSeats, mSeats, bSeats));

                    } catch (Exception e){
                        e.printStackTrace();
                        System.out.println("A line in showing file has an error");
                    }

                }
            }
        } catch(Exception e){
            System.out.println("Error reading userInfo.csv");
            System.exit(-1);
        }
        return showingList;
    }

    public static void updateShowings(String fileName, String filePath, ArrayList<Showing> showings){
        //Get file path to read it
        File file = new File(fileName);
        String path = file.getAbsolutePath().replace(fileName, filePath + File.separator + fileName);

        ArrayList<String> fileLines = new ArrayList<>();
        for (Showing s : showings){
            String newLine = s.getTime() + "," + s.getID() + "," + s.getCinemaID() + "," + s.getCinemaRoomNumber() + "," + s.getFSeats() + "," + s.getMSeats() + "," + s.getBSeats();
            fileLines.add(newLine);
        }

        //Now write to file
        try {
            FileWriter myWriter = new FileWriter(path);
            for (int j = 0; j < fileLines.size(); j++){
                myWriter.write(fileLines.get(j));
                if (j != fileLines.size()-1){
                    myWriter.write('\n');
                }
            }
            myWriter.close();

        } catch (Exception e) {
            System.out.println("Error writing to showing file");
            e.printStackTrace();
            return;
        }


    }



    private ArrayList<GiftCard> initialiseGiftCards(){
        //Initialise list
        ArrayList<GiftCard> cardList = new ArrayList<>();

        //Get file path
        String path = getRequiredPath(resourcesDir, "giftCard.csv");

        //Start reading file
        try (BufferedReader br = new BufferedReader(new FileReader(path))) {
            String line;

            //For each line in the file
            while ((line = br.readLine()) != null) {
                //Get each entry
                String[] lineValues = line.split(",");
                List<String> currentValues = Arrays.asList(lineValues);

                // Ignore comments
                if (currentValues.get(0).startsWith("//")) {
                    continue;
                }
                else if (currentValues.size() < 2){
                    //If the current line is not valid
                    System.out.println("A line in gift Card file has an error");
                } else{
                    try{
                        //Get trivial variables
                        String cardNo = lineValues[0];
                        String cardStatus = lineValues[1];

                        GiftCard gc = new GiftCard(cardNo, cardStatus);
                        cardList.add(gc);

                    } catch (Exception e){
                        System.out.println("A line in gift card file has an error");
                    }

                }
            }
        } catch(Exception e){
            System.out.println("Error reading giftCard.csv");
            System.exit(-1);
        }
        return cardList;
    }


    private ArrayList<Movie> initialiseMovies(){
        //Initialise list
        ArrayList<Movie> movieList = new ArrayList<>();

        //Get file path
        String path = getRequiredPath(resourcesDir, "movies.csv");

        //Start reading file
        try (BufferedReader br = new BufferedReader(new FileReader(path))) {
            String line;

            //For each line in the file
            while ((line = br.readLine()) != null) {
                //Get each entry
                String[] lineValues = line.split(",");
                List<String> currentValues = Arrays.asList(lineValues);

                // Ignore comments
                if (currentValues.get(0).startsWith("//")) {
                    continue;
                }
                else if (currentValues.size() < 8){
                    //If the current line is not valid
                    System.out.println("A line in movie file has an error");
                } else{
                    try{
                        //Get trivial variables
                        int movieID = Integer.parseInt(lineValues[0]);
                        String ratingName = lineValues[1];
                        String movieName = lineValues[2];
                        int duration = Integer.parseInt(lineValues[3]);
                        String description = lineValues[4];
                        String releaseDate = lineValues[5];
                        String director = lineValues[6];

                        //Get the actors
                        ArrayList<String> actors = new ArrayList<>();
                        for (int i = 7; i < currentValues.size(); i++){
                            actors.add(lineValues[i]);
                        }
                        String[] actorsArray = new String[actors.size()];
                        actorsArray = actors.toArray(actorsArray);

                        //Add movie
                        Movie m = new Movie(ratingName, movieName, duration, movieID, description, releaseDate, director, actorsArray);
                        movieList.add(m);

                    } catch (Exception e){
                        System.out.println("A line in movie file has an error");
                    }

                }
            }
        } catch(Exception e){
            System.out.println("Error reading movies.csv");
            System.exit(-1);
        }
        return movieList;
    }

    /**
     * Initialise the cinemas
     * @return a list of Cinema according to locations.csv
     */
    private ArrayList<Cinema> initialiseCinemas(){
        //Initialise list
        ArrayList<Cinema> cinemaList = new ArrayList<>();

        //Get file path
        String path = getRequiredPath(resourcesDir, "locations.csv");

        //Start reading file
        try (BufferedReader br = new BufferedReader(new FileReader(path))) {
            String line;

            //For each line in the file
            while ((line = br.readLine()) != null) {
                //Get each entry
                String[] lineValues = line.split(",");
                List<String> currentValues = Arrays.asList(lineValues);

                if (currentValues.size() != 5){
                    //If the current line is not valid
                    System.out.println("A line in movie file has an error");
                } else{
                    try{
                        int id = Integer.parseInt(lineValues[0]);
                        String name = lineValues[1];
                        int nuBronze = Integer.parseInt(lineValues[2]);
                        int nuSilver = Integer.parseInt(lineValues[3]);
                        int nuGold = Integer.parseInt(lineValues[4]);
                        cinemaList.add(new Cinema(name, id, nuBronze, nuSilver, nuGold));

                    } catch (Exception e){
                        System.out.println("A line in location file has an error");
                    }

                }
            }
        } catch(Exception e){
            System.out.println("Error reading locations.csv");
            System.exit(-1);
        }
        return cinemaList;
    }

    /**
     * Clears the file
     * @param path path of the file
     * @param fileName file name
     */
    public static void clearFile(String path, String fileName){
        //Get file path to read it
        File file = new File(fileName);
        String newPath = file.getAbsolutePath().replace(fileName, path + File.separator + fileName);

        try{
            PrintWriter writer = new PrintWriter(newPath);
            writer.print("");
            writer.close();
        } catch (Exception e){
            ;
        }
    }

    /**
     * Get the path required for file reading and writing
     * @param path relative path of the file in project scope
     * @param fileName file name
     * @return
     */
    public static String getRequiredPath(String path, String fileName){
        File file = new File(fileName);
        return file.getAbsolutePath().replace(fileName, path + File.separator + fileName);
    }

    /**
     * Displays the main menu, depending on input calls a function or shuts down
     */
    public void mainScreen(){
        while (!UI.exit){

            //Print who is logged in
            ArrayList<String> options = new ArrayList<String> ();
            options.add("Log in/Sign up");
            options.add("View Movies");
            options.add("Staff Stuff");
            options.add("Exit software");

            if (currentUser != null){
                options.set(0, "Sign out");
            }
            int input = UI.chooseOption("Home", currentUser, options, null);
            if (UI.exit) { break; }

            switch (input){
                case 1:
                    logInHandler();
                    break;

                case 2:
                    viewMovies(null, -1);
                    break;

                case 3:
                    //TODO once testing is done, make sure only staff can do this
                    if (currentUser != null && (currentUser.getUserType().equals(User.UserType.STAFF) || currentUser.getUserType().equals(User.UserType.MANAGER))){
                        staffMenu();
                    } else{
                       System.out.println("This option is available only to Staff and Managers");
                   }

                    break;

                case 4:
                    UI.exit = true;
                    break;

                default:
                    break;
            }
        }
    }


    public void staffMenu(){
        boolean staff = true;
        while (!UI.exit && staff){

            //Print who is logged in
            ArrayList<String> options = new ArrayList<String> ();
            options.add("Edit Movies");
            options.add("Add Showings");
            options.add("Manage Gift Cards");
            options.add("Generate Reports");
            options.add("Manage Staff");
            options.add("Go Back");

            int input = UI.chooseOption("Staff Menu", currentUser, options, null);
            if (UI.exit) { break; }

            switch (input){
                case 1:
                    editMovies();
                    break;

                case 2:
                    //TODO
                    addShowing();
                    break;

                case 3:
                    //TODO
                    addGiftCard();
                    break;

                case 4:
                    chooseReport();
                    break;

                case 5:
                    if (currentUser.getUserType() != User.UserType.MANAGER){
                        System.out.println("Only managers can do this");
                    } else{
                        manageStaff();
                    }
                    break;

                case 6:
                    staff=false;
                    break;

                default:
                    break;
            }
        }
    }


    public void addShowing(){
        //Get a date
        System.out.println("To go back, enter nothing");
        System.out.print("Input Day(1-[28,29,30,31]): ");
        String day = Input.getStrInput();
        if (Input.stdInEOF) { return; }
        if (day.length() == 1){day = "0" + day;}

        System.out.println("To go back, enter nothing");
        System.out.print("Input Month (1-12): ");
        String month = Input.getStrInput();
        if (Input.stdInEOF) { return; }
        if (month.length() == 1){month = "0" + month;}

        System.out.println("To go back, enter nothing");
        System.out.print("Input Year (4 number format): ");
        String year = Input.getStrInput();
        if (Input.stdInEOF) { return; }

        System.out.println("To go back, enter nothing");
        System.out.print("Input hour: ");
        String hour = Input.getStrInput();
        if (Input.stdInEOF) { return; }
        if (hour.length() == 1){hour = "0" + hour;}

        System.out.println("To go back, enter nothing");
        System.out.print("Input Minute: ");
        String minute = Input.getStrInput();
        if (Input.stdInEOF) { return; }
        if (minute.length() == 1){minute = "0" + minute;}

        String date = year + "/" + month + "/" + day + " " + hour + ":" + minute;
        System.out.println("Your selected date is: " + date);
        System.out.println("Notice: You must manually check the dates correctness");
        System.out.print("0 to cancel, 1 to confirm: ");
        int input = Input.getIntInput();
        if (Input.stdInEOF || input == 0) { return; }

        //Get the movie
        int index = 1;
        for (Movie m : movies){
            System.out.println(index + ") " + m.getName());
            index++;
        }

        System.out.println("0) Cancel");
        System.out.print("Select a movie: ");

        //Get user input
        input = Input.getIntInput();
        if (UI.exit) {return;}
        while (input < 0 || input > movies.size()){
            UI.error("Invalid input", true); //If the input is invalid this prints
            System.out.print("Select a movie: ");
            input = Input.getIntInput();
            if (UI.exit) {return;}
            if (input == 0){return;}
        }

        int movieID = movies.get(input-1).getID();
        String movieName = movies.get(input-1).getName();
        System.out.println("Movie: " + movieName + " selected.");

        //Select a cinema
        index = 1;
        for (Cinema c : cinemas){
            System.out.println(index + ") " + c.getCinemaName());
            index++;
        }

        System.out.println("0) Cancel");
        System.out.print("Select a cinema: ");

        //Get user input
        input = Input.getIntInput();
        if (UI.exit) {return;}
        while (input < 0 || input > cinemas.size()){
            UI.error("Invalid input", true); //If the input is invalid this prints
            System.out.print("Select a movie: ");
            input = Input.getIntInput();
            if (UI.exit) {return;}
            if (input == 0){return;}
        }

        Cinema cinema = cinemas.get(input-1);
        System.out.println("Cinema: " + cinema.getCinemaName() + " selected.");

        //Get room type
        System.out.println("Select a room to play the movie in");
        for (int i : cinema.getRooms().keySet()){
            System.out.println(i + ") " + cinema.getRooms().get(i));
        }

        input = Input.getIntInput();
        if (UI.exit) {return;}
        while (input < 0 || input > cinema.getRooms().size()){
            UI.error("Invalid input", true); //If the input is invalid this prints
            System.out.print("Select a movie: ");
            input = Input.getIntInput();
            if (UI.exit) {return;}
            if (input == 0){return;}
        }

        Cinema.ScreenType st = cinema.getRooms().get(input);

        Showing s = new Showing(date, movieID, cinema.getCinemaID(), input, st, 50, 50, 50);
        System.out.println("Created new showing with: ");
        System.out.println("Date: " + date);
        System.out.println("Movie: " + movieName + " (ID: " + movieID + ")");
        System.out.println("Cinema: " + cinema.getCinemaName());
        System.out.println("In room number: " + input + " ("  + st.toString() + ")");

        //Final check
        System.out.print("1 to add showing to database, 0 to cancel: ");
        input = Input.getIntInput();
        if (Input.stdInEOF || input == 0) { return; }
        movieShowings.add(s);
        updateShowings("movieShowings.csv", resourcesDir, movieShowings);
        System.out.println("Successfully added new showing");
    }




    public void addGiftCard(){
        boolean addGiftCard = true;
        while(addGiftCard) {
            System.out.print("Enter Card Number (14 digits): ");
            String newCard = Input.getStrInput();
            if (newCard.length() != 14) {
                System.out.println("Invalid Number");
            }
            else{
                String number = newCard + "GC";
                String status = "VALID";
                GiftCard gc = new GiftCard(number, status);
                giftCards.add(gc);
                System.out.println("Gift card successfully added!");
                updateGiftCards();
            }
            addGiftCard = false;
            break;
        }
    }

    public void updateGiftCards(){
        String path = App.resourcesDir + File.separator + "giftCard.csv";

        try {
            FileWriter myWriter = new FileWriter(path);
            for(GiftCard gc : giftCards){
                StringBuilder toAdd = new StringBuilder(gc.getNumber() + "," + gc.getStatus() + "\n");
                myWriter.write(toAdd.toString());
            }
            myWriter.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    public void chooseReport() {
        boolean goBack = false;
        while (!UI.exit && !goBack){
            
            //Print who is logged in
            ArrayList<String> options = new ArrayList<String> ();
            options.add("Upcoming movies and shows");
            options.add("Bookings information for session");
            options.add("Cancelled transaction");
            options.add("Go Back");

            int input = UI.chooseOption("Generate Reports", currentUser, options, null);
            if (UI.exit) { break; }

            switch (input){
                case 1:
                 List<Showing> upcomingShowings = new ArrayList<Showing>();
                 for(Showing e:this.movieShowings){
                     try{
                    Date temp = new SimpleDateFormat("yyyy/MM/dd").parse(e.getTime());
                    Date curDate =  new SimpleDateFormat("yyyy/MM/dd").parse(formatted);
                    int diff = (int) (temp.getTime()-curDate.getTime())/(1000*60*60*24);
                    if(diff >= 0 && diff <=7){
                        upcomingShowings.add(e);
                    }
                    }
                     catch (Exception exception){
                         continue;
                     }
                    }
                    writeShowingReport(upcomingShowings);
                    break;
        
                case 2:
                    clearFile(resourcesDir, "seatingInfo.txt");
                    ArrayList<String> lineInfo = new ArrayList<>();
                    for (Showing showing : movieShowings) {
                        Movie movie = Movie.getMovieWithID(movies, showing.getID());
                        lineInfo.add(movie.getRating() + " " + movie.getName() + " " + movie.getDuration() + " minutes " + movie.getSynopsis() + " " + movie.getRelease() + " " + movie.getDirector() + " " + Arrays.toString(movie.getCast()) + " " + "Showings: " + showing.getTime() + " [" + showing.getSize() + "] ");
                        lineInfo.add("Seats Available: " + (showing.getBSeats() + showing.getFSeats() + showing.getMSeats()) + "/150");
                        lineInfo.add("");
                    }

                    //Now write to file
                    File file = new File("seatingInfo.txt");
                    String path = file.getAbsolutePath().replace("seatingInfo.txt", resourcesDir + File.separator + "seatingInfo.txt");
                    try {
                        FileWriter myWriter = new FileWriter(path);
                        for (int j = 0; j < lineInfo.size(); j++){
                            myWriter.write(lineInfo.get(j));
                            if (j != lineInfo.size()-1){
                                myWriter.write('\n');
                            }
                        }
                        myWriter.close();
                        System.out.println("Report generated in seatingInfo.txt");

                    } catch (Exception e) {
                        System.out.println("Error writing to seatingInfo file");
                        e.printStackTrace();
                    }
                    break;

                case 3:
                    cancelledTxReport();
                    break;
                    
                case 4:
                    goBack = true;
                    break;
                    
                default:
                    break;
                }
            }
        }

    public void editMovies(){
        boolean editMovies = true;
        while (!UI.exit && editMovies){

            //Print who is logged in
            ArrayList<String> options = new ArrayList<String> ();
            options.add("Add Movie");
            options.add("Delete Movie");
            options.add("Update Movie");
            options.add("Go Back");

            int input = UI.chooseOption("Edit Movies", currentUser, options, null);
            if (UI.exit) { break; }

            switch (input) {
                case 1:
                    addMovie();
                    break;
                
                case 2:
                    //TODO
                    deleteMovie();
                    break;

                case 3:
                    //TODO
//                    editMovies=false;
                    updateMovie();
                    break;

                default:
                    editMovies=false;
                    break;
            }
        }
    }
    
    public void deleteMovie() {
        int toDelete;
        boolean deleteMovies = true;
        while (deleteMovies){
            UI.drawBox("Delete Movie");

            ArrayList<String> options = new ArrayList<>();
            for (Movie movie : movies) {
                options.add(movie.getRating() + " " + movie.getName() + " " + movie.getDuration() + " minutes " + movie.getSynopsis() + " " + movie.getRelease() + " " + movie.getDirector() + " " + Arrays.toString(movie.getCast()));
            }

            //TODO handle input here
            int input = UI.chooseOption(null, this.currentUser, options, null);
            if (UI.exit) {
                break;
            }
            toDelete = input;
            deleteMovies = false;
            deleteFromData(toDelete);

        }

    }

    public void deleteFromData(int input){
        int count = 0;
        for (Movie movie : movies) {
            if (count == input) {
                try {
                    String path = getRequiredPath(resourcesDir, "movies.csv");
                    List<String> lines = Files.readAllLines(Path.of(path), StandardCharsets.UTF_8);
                    lines.set(count, "".trim());
                    Files.write(Path.of(path), lines, StandardCharsets.UTF_8);
                    System.out.println("Movie successfully deleted!");

                } catch (IOException e) {
                    System.out.println("An error occurred.");
                    e.printStackTrace();
                }
            }
            count++;
        }
        movies.remove(input-1);
    }


    public void updateMovie() {
        int toUpdate;
        boolean updateMovies = true;
        while (updateMovies){
            UI.drawBox("Update Movie");
            System.out.println("Which movie would you like to update?\n");
            ArrayList<String> options = new ArrayList<>();
            for (Movie movie : movies) {
                options.add(movie.getRating() + " " + movie.getName() + " " + movie.getDuration() + " minutes " + movie.getSynopsis() + " " + movie.getRelease() + " " + movie.getDirector() + " " + Arrays.toString(movie.getCast()));
            }

            int input = UI.chooseOption(null, this.currentUser, options, null);
            if (UI.exit) {
                break;
            }
            toUpdate = input;
            updateMovies = false;
            chooseUpdateField(toUpdate);
        }

    }

    public void chooseUpdateField(int toUpdate){
        boolean chooseUpdate = true;
        while (!UI.exit && chooseUpdate){

            //Print who is logged in
            ArrayList<String> options = new ArrayList<String> ();
            options.add("Update Rating");
            options.add("Update Title");
            options.add("Update running time");
            options.add("Update description");
            options.add("Update release date");
            options.add("Update director");
            options.add("Update cast");
            options.add("Go Back");

            int input = UI.chooseOption("Edit Movies", currentUser, options, null);
            if (UI.exit) { break; }
            String path = App.resourcesDir + File.separator + "movies.csv";
            switch (input){
                case 1:
                    System.out.println("New Rating: ");
                    String newRating= Input.getStrInput();
                    if (Input.stdInEOF) { return; }
                    movies.get(toUpdate-1).setRating(newRating);

                    try {
                        FileWriter myWriter = new FileWriter(path);
                        myWriter.write("//movies\n");
                        for(Movie movie:movies){
                            StringBuilder toAdd = new StringBuilder(movie.getID() + "," + movie.getRating().toString() + "," + movie.getName() + "," + movie.getDuration() + "," + movie.getSynopsis() + "," + movie.getRelease() + "," + movie.getDirector()+","+ Arrays.toString(
                                movie.getCast()).replace("[","").replace("]","").trim()+"\n" );
                            myWriter.write(toAdd.toString());
                        }
                        myWriter.close();

                    } catch (IOException e) {
                        UI.error(String.format("Error writing %s", path), true);
                    }
                    break;

                case 2:
                    System.out.print("New Title: ");
                    String newTitle= Input.getStrInput();
                    if (Input.stdInEOF) { return; }
                    movies.get(toUpdate-1).setName(newTitle);

                    try {
                        FileWriter myWriter = new FileWriter(path);
                        myWriter.write("//movies\n");
                        for(Movie movie:movies){
                            StringBuilder toAdd = new StringBuilder(movie.getID() + "," + movie.getRating().toString() + "," + movie.getName() + "," + movie.getDuration() + "," + movie.getSynopsis() + "," + movie.getRelease() + "," + movie.getDirector()+","+ Arrays.toString(
                                movie.getCast()).replace("[","").replace("]","").trim()+"\n" );
                            myWriter.write(toAdd.toString());
                        }
                        myWriter.close();

                    } catch (IOException e) {
                        UI.error(String.format("Error writing %s", path), true);
                    }
                    break;

                case 3:
                    System.out.println("New Duration: ");
                    int newDuration =  Input.getIntInput();
                    if (Input.stdInEOF) { return; }
                    if (newDuration <= 0) {
                        System.out.println("invalid duration");
                        break;
                    }
                    movies.get(toUpdate-1).setDuration(newDuration);

                    try {
                        FileWriter myWriter = new FileWriter(path);
                        myWriter.write("//movies\n");
                        for(Movie movie:movies){
                            StringBuilder toAdd = new StringBuilder(movie.getID() + "," + movie.getRating().toString() + "," + movie.getName() + "," + movie.getDuration() + "," + movie.getSynopsis() + "," + movie.getRelease() + "," + movie.getDirector()+","+ Arrays.toString(
                                movie.getCast()).replace("[","").replace("]","").trim()+"\n" );
                            myWriter.write(toAdd.toString());
                        }
                        myWriter.close();

                    } catch (IOException e) {
                        UI.error(String.format("Error writing %s", path), true);
                    }
                    break;

                case 4:
                    //update description
                    System.out.println("New Description: ");
                    String newDescription= Input.getStrInput();
                    if (Input.stdInEOF) { return; }
                    movies.get(toUpdate-1).setSynopsis(newDescription);

                    try {
                        FileWriter myWriter = new FileWriter(path);
                        myWriter.write("//movies\n");
                        for(Movie movie:movies){
                            StringBuilder toAdd = new StringBuilder(movie.getID() + "," + movie.getRating().toString() + "," + movie.getName() + "," + movie.getDuration() + "," + movie.getSynopsis() + "," + movie.getRelease() + "," + movie.getDirector()+","+ Arrays.toString(
                                movie.getCast()).replace("[","").replace("]","").trim()+"\n" );
                            myWriter.write(toAdd.toString());
                        }
                        myWriter.close();

                    } catch (IOException e) {
                        UI.error(String.format("Error writing %s", path), true);
                    }
                    break;

                case 5:
                    //Release date
                    System.out.println("New Release Date: ");
                    String newReleaseDate= Input.getStrInput();
                    if (Input.stdInEOF) { return; }
                    movies.get(toUpdate-1).setRelease(newReleaseDate);

                    try {
                        FileWriter myWriter = new FileWriter(path);
                        myWriter.write("//movies\n");
                        for(Movie movie:movies){
                            StringBuilder toAdd = new StringBuilder(movie.getID() + "," + movie.getRating().toString() + "," + movie.getName() + "," + movie.getDuration() + "," + movie.getSynopsis() + "," + movie.getRelease() + "," + movie.getDirector()+","+ Arrays.toString(
                                movie.getCast()).replace("[","").replace("]","").trim()+"\n" );
                            myWriter.write(toAdd.toString());
                        }
                        myWriter.close();

                    } catch (IOException e) {
                        UI.error(String.format("Error writing %s", path), true);
                    }
                    break;

                case 6:
                    //director
                    System.out.println("New Director: ");
                    String newDir= Input.getStrInput();
                    if (Input.stdInEOF) { return; }
                    movies.get(toUpdate-1).setDirector(newDir);

                    try {
                        FileWriter myWriter = new FileWriter(path);
                        myWriter.write("//movies\n");
                        for(Movie movie:movies){
                            StringBuilder toAdd = new StringBuilder(movie.getID() + "," + movie.getRating().toString() + "," + movie.getName() + "," + movie.getDuration() + "," + movie.getSynopsis() + "," + movie.getRelease() + "," + movie.getDirector()+","+ Arrays.toString(
                                movie.getCast()).replace("[","").replace("]","").trim()+"\n" );
                            myWriter.write(toAdd.toString());
                        }
                        myWriter.close();

                    } catch (IOException e) {
                        UI.error(String.format("Error writing %s", path), true);
                    }
                    break;
                case 7:
                    String cast[] = new String[1];
                    System.out.println("New cast: ");
                    cast[0] = Input.getStrInput();
                    if (Input.stdInEOF) { return; }
                    movies.get(toUpdate-1).setCast(cast);

                    try {
                        FileWriter myWriter = new FileWriter(path);
                        myWriter.write("//movies\n");
                        for(Movie movie:movies){
                            StringBuilder toAdd = new StringBuilder(movie.getID() + "," + movie.getRating().toString() + "," + movie.getName() + "," + movie.getDuration() + "," + movie.getSynopsis() + "," + movie.getRelease() + "," + movie.getDirector()+","+ Arrays.toString(
                                movie.getCast()).replace("[","").replace("]","").trim()+"\n" );
                            myWriter.write(toAdd.toString());
                        }
                        myWriter.close();

                    } catch (IOException e) {
                        UI.error(String.format("Error writing %s", path), true);
                    }
                    break;

                default:
                    chooseUpdate=false;
                    break;
            }
        }
    }

    public void cancelledTxReport() {
        if (this.currentUser.getUserType() != User.UserType.MANAGER) {
            UI.error("Permission denied, you need to be a manager to view this report.", true);
            return;
        }
        System.out.print("Filename for report: ");
        final String fileName = Input.getStrInput();
        if (Input.stdInEOF) {
            return;
        }
        BookingInfo.generateCancelledTxReport(fileName);
    }

    public void addMovie() {
        System.out.print("Rating: ");
        String newRating= Input.getStrInput();
        if (Input.stdInEOF) { return; }
        System.out.print("Movie Name: ");
        String newName= Input.getStrInput();
        if (Input.stdInEOF) { return; }
        System.out.print("Enter Duration: (mins) ");
        int newDuration= Input.getIntInput();
        if (Input.stdInEOF) { return; }
        System.out.print("Enter Movie ID: ");
        int newID= Input.getIntInput();
        if (Input.stdInEOF) { return; }
        System.out.print("Description: ");
        String newDescription= Input.getStrInput();
        if (Input.stdInEOF) { return; }
        System.out.print("Release Date: ");
        String newRelease= Input.getStrInput();
        if (Input.stdInEOF) { return; }
        System.out.print("Director: ");
        String newDirector= Input.getStrInput();
        if (Input.stdInEOF) { return; }
        System.out.print("Actors: ");
        ArrayList<String> values = new ArrayList<>();
        String input = " ";
        while (!input.equals("")) {
            input = Input.getStrInput();
            if (Input.stdInEOF) { return; }
            if (!input.equals("")) {
                values.add(input);
            }
        }

        String[] newActors = new String[values.size()];
        newActors = values.toArray(newActors);

        try {
            String path = getRequiredPath(resourcesDir, "movies.csv");

            StringBuilder toAdd = new StringBuilder("\n" + newID + "," + newRating + "," + newName + "," + newDuration + ",\"" + newDescription + "\"," + newRelease + "," + newDirector);
            for (String newActor : newActors) {
                toAdd.append(",").append(newActor);
            }
            Files.write(Paths.get(path), toAdd.toString().getBytes(), StandardOpenOption.APPEND);

        } catch (IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
        Movie newMovie = new Movie(newRating,newName,newDuration ,newID, "\"" + newDescription + "\"" , newRelease , newDirector, newActors);
        movies.add(newMovie);
    }

    public void manageStaff(){
        boolean staff = true;
        while (!UI.exit && staff){

            //Print who is logged in
            ArrayList<String> options = new ArrayList<String> ();
            options.add("Add Staff Member");
            options.add("Remove Staff Member");
            options.add("Go Back");

            int input = UI.chooseOption("Staff Management", currentUser, options, null);
            if (UI.exit) { break; }

            switch (input){
                case 1:
                    //ADD STAFF MEMBER
                    addStaff();
                    break;

                case 2:
                    //REMOVE STAFF MEMBER
                    removeStaff();
                    break;

                case 3:
                    staff=false;
                    break;

                default:
                    break;
            }
        }


    }

    /**
     * Walk the user through adding a staff member
     */
    public void addStaff(){
        //First get username
        System.out.println("Leave blank to go back");
        System.out.print("Pick a username for the new staff member: ");
        String usernameChoice = Input.getStrInput();
        if (UI.exit) {return;}
        if (usernameChoice.equals("")){
            return;
        } else if (User.usernameExist(users, usernameChoice)){
            System.out.println("ERROR: This username is taken");
            return;
        } else if (usernameChoice.indexOf(" ") != -1){
            System.out.println("Usernames cant have spaces");
            return;
        } else{
            System.out.println("Valid username selected (" + usernameChoice + ")");
        }

        //Get password
        System.out.println("Leave blank to go back");
        System.out.println("Pick a password for the new staff member.");
        String passwordChoice = Input.getPassword();
        if (UI.exit) {return;}
        if (passwordChoice.equals("")){
            return;
        }

        //Add the new staff member
        users.add(new User(usernameChoice, passwordChoice, null, User.UserType.STAFF));
        User.updateUsers(resourcesDir, "userInfo.csv", users);
        System.out.println("New Staff Member added with username: " + usernameChoice);
    }

    public void removeStaff(){
        //Get the staff
        ArrayList<User> staffMembers = new ArrayList<>();
        int index = 1;
        for (User u : users){
            if (u.getUserType().equals(User.UserType.STAFF)) {
                staffMembers.add(u);
                System.out.println(index + ") " + u.getName());
                index++;
            }
        }
        //Verify we can actually remove some
        if (staffMembers.size() == 0){
            System.out.println("There are no staff, you can't remove any");
            return;
        }

        System.out.println("0) Cancel");
        System.out.print("Select a staff member to remove: ");


        //Get user input
        int input = Input.getIntInput();
        if (UI.exit) {return;}
        if (input == 0) {return;}
        while (input < 0 || input > staffMembers.size()){
            UI.error("Invalid input", true); //If the input is invalid this prints
            System.out.print("Select a staff member to remove: ");
            input = Input.getIntInput();
            if (UI.exit) {return;}
            if (input == 0){return;}
        }

        //And let the user know a staff member is removed
        System.out.println("Removed staff member: " + staffMembers.get(input-1).getName());
        users.remove(staffMembers.get(input-1));
        User.updateUsers(resourcesDir, "userInfo.csv", users);
    }


    /**
     * If we want to log in or out, depending on user allow the user to log out, log in or register a new account
     */
    public void logInHandler(){
        if (currentUser == null) {

            ArrayList<String> options = new ArrayList<String> ();
            options.add("Log in");
            options.add("Register");
            options.add("Go Back");

            boolean success = false;
            while (!success) {
                if (!UI.exit) {
                    int input = UI.chooseOption("Log In / Register", currentUser, options, null);
                    switch (input) {
                        case 1:
                            success = logIn();
                            break;
                        
                        case 2:
                            success = registerAccount();
                            break;
        
                        case 3:
                            success = true;
                            break;
        
                        default:
                            break;
                    }
                } else {
                    break;
                }
            }

        } else {
            currentUser = null;
            System.out.println("You have been logged out");
            return;
        }
    }

    /**
     * Take in a new username and password, if the username isnt taken, add a new user and log it in
     */
    private boolean registerAccount(){
        UI.drawBox("Register an account");
        System.out.println("Leave the fields empty to cancel and go back.");

        String newUsername = null;
        String newPassword = null;

        final String cancelStr = "";
        final String cancelMsg = "Cancelling...";

        boolean validUsername = false;
        while (!validUsername) {

            System.out.print("New Username: ");
            newUsername = Input.getStrInput();
            if (Input.stdInEOF) {
                return false;
            }
            if (newUsername.equals(cancelStr)) {
                System.out.println(cancelMsg);
                return false;
            }
            if (User.usernameExist(users, newUsername)) {
                UI.error("Username exist, please try again.", true);
            } else {
                validUsername = true;
            }
        }

        System.out.print("New ");
        newPassword = Input.getPassword();
        if (Input.stdInEOF) {
            return false;
        }
        if (newPassword.equals(cancelStr)) {
            System.out.println(cancelMsg);
            return false;
        }
        
        User newUser = new User(newUsername, newPassword, null, User.UserType.CUSTOMER);

        if (User.addUser(users, newUser)) {
            UI.success("Registration successful!", true);
            currentUser = newUser;
            return true;
        }
        return false;
    }

    /**
     * Allow a user to input a username and password, if the username exists and the password matches, set the current user to this one
     */
    private boolean logIn() {
        boolean isValid = false;
        while (!isValid) {
            final String username;
            final String pwd;

            UI.drawBox("Log In");
            System.out.print("Username: ");
            username = Input.getStrInput();
            if (Input.stdInEOF) {
                break;
            }
            isValid = !Input.error;
            if (isValid) {
                pwd = Input.getPassword();
                if (Input.stdInEOF) {
                    break;
                }
                isValid = !Input.error;
            } else {
                pwd = null;
            }

            if (isValid) {
                for (User user : this.users) {
                    if (user.validateCred(username, pwd)) {
                        this.currentUser = user;
                        break;
                    }
                }
            }
        }
        if (this.currentUser == null) {
            UI.error("Invalid username or password.", true);
            return false;
        } else {
            UI.success("Login successful.", true);
            return true;
        }
    }

    /**
     * List all the movies, allow for the user to book a movie and to filter them however they want
     */
    public void viewMovies(Cinema.ScreenType screenFilter, int cinemaFilter){
        boolean viewMovies = true;

        while (viewMovies){
            UI.drawBox("Movie List");
            displayMovies(screenFilter, cinemaFilter);

            ArrayList<String> options = new ArrayList<String> ();
            options.add("Book Movie");
            options.add("Filter Movies");
            options.add("Go Back");

            int input = UI.chooseOption(null, this.currentUser, options, null);
            if (UI.exit) {
                break;
            }

            switch (input) {
                case 1:
//                    viewMovies = false;
                    if (this.currentUser == null) {
                        UI.error("Please log in to book a movie.", true);
                        logInHandler();
                        if (this.currentUser == null) { // If go back was chosen
                            continue;
                        }
                    } else new RequestRegistry().getHandler("Booking").handle(this);
                    break;

                case 2:
                    viewMovies = false;
                    filterMovies(screenFilter, cinemaFilter);
                    break;

                case 3:
                    viewMovies = false;
                    break;

                default:
                    break;
            }
        }
    }

    /**
     * Display the movies depending on the filters
     * The movie list is an ArrayList of Showing
     * @param screenFilter Will be (null/BRONZE/SILVER/GOLD), display all if null or specific cinema type otherwise
     * @param cinemaFilter If -1, display all locations, otherwise display by the provided ID
     */
    public void displayMovies(Cinema.ScreenType screenFilter, int cinemaFilter){
        displayCurrentFilters(screenFilter, cinemaFilter);
        for (Movie movie : movies) {
            boolean hasShowings = false;

                System.out.print(movie.getRating() + " " + movie.getName() + " " + movie.getDuration() + " minutes " + movie.getSynopsis() + " " + movie.getRelease() + " " + movie.getDirector() + " " + Arrays.toString(movie.getCast()) + " " + "Showings: ");
                for (Showing showing : movieShowings) {
                    if (movie.getID() == showing.getID()) {
                        if (screenFilter == null && cinemaFilter == -1) {
                            hasShowings = true;
                            System.out.print(showing.getTime() + " [" + showing.getSize() + "] ");
                        }
                        else if (screenFilter != null && cinemaFilter != -1) {
                            if (showing.getSize() == screenFilter && showing.getCinemaID() == cinemaFilter) {
                                hasShowings = true;
                                System.out.print(showing.getTime() + " [" + showing.getSize() + "] " );
                            }
                        }
                        else if (screenFilter == null) {
                            if (showing.getCinemaID() == cinemaFilter) {
                                hasShowings = true;
                                System.out.print(showing.getTime() + " [" + showing.getSize() + "] " );
                            }
                        }
                        else{
                            if (showing.getSize() == screenFilter) {
                                hasShowings = true;
                                System.out.print(showing.getTime() + " [" + showing.getSize() + "] " );
                            }
                        }
                    }
                }

            if (!hasShowings){
                System.out.print("No upcoming showings");
            }
            System.out.print("\n");
        }
        System.out.print("\n");
    }

    public void displayCurrentFilters(Cinema.ScreenType screenFilter, int cinemaFilter){
        System.out.println("Current Filters:");
        if(screenFilter == null && cinemaFilter == -1){
            System.out.println("None" + "\n");
        }
        else if(screenFilter == null){
            System.out.println("Location: " + cinemas.get(cinemaFilter-1).getCinemaName() + "\n");
        }
        else if(cinemaFilter == -1){
            // this needs to print cinema name, not id
            System.out.println("Screen Type: " + screenFilter + "\n");
        }
        else{
            System.out.println("Location: " + cinemas.get(cinemaFilter-1).getCinemaName());
            System.out.println("Screen Type: " + screenFilter + "\n");
        }
    }

    public void filterMovies(Cinema.ScreenType screenFilter, int cinemaFilter){
        boolean filterMovies = true;

        while (filterMovies){
            UI.drawBox("Filter Movies");

            ArrayList<String> options = new ArrayList<String> ();
            options.add("Filter by location");
            options.add("Filter by cinema type");
            options.add("Go back");

            //TODO handle input here
            int input = UI.chooseOption(null, this.currentUser, options, null);
            if (UI.exit) {
                break;
            }

            switch (input) {
                case 1:
                    filterMovies = false;
                    // show all locations, select
                    filterLocation(screenFilter, cinemaFilter);
                    ; //TODO allow the user to book a movie from the current list
                    break;
                case 2:
                    filterMovies = false;
                    filterScreenSize(screenFilter, cinemaFilter);
                    ; //TODO Allow the user to edit the filters
                    break;
                case 3:
                    filterMovies = false;
                    break;

                default:
                    break;
            }
        }
    }

    public void filterLocation(Cinema.ScreenType screenFilter, int cinemaFilter){
        boolean filterLocations = true;
        while (filterLocations){
            UI.drawBox("Locations");

            ArrayList<String> options = new ArrayList<>();
            for (Cinema cinema : cinemas) {
                options.add(cinema.getCinemaName());
            }

            //TODO handle input here
            int input = UI.chooseOption(null, this.currentUser, options, null);
            if (UI.exit) {
                break;
            }
                cinemaFilter = input;
                filterLocations = false;
                displayMovies(screenFilter, cinemas.get(input-1).getCinemaID());
                viewMovies(screenFilter, cinemaFilter);
        }
    }

    public void filterScreenSize(Cinema.ScreenType screenFilter, int cinemaFilter){
        boolean filterScreenSize = true;
        while (filterScreenSize){
            UI.drawBox("Screen Sizes");

            ArrayList<String> options = new ArrayList<String> ();
            options.add("BRONZE");
            options.add("SILVER");
            options.add("GOLD");

            //TODO handle input here
            System.out.println("input");
            int input = UI.chooseOption(null, this.currentUser, options, null);
            if (UI.exit) {
                break;
            }

            if (input == 1){
                screenFilter = Cinema.ScreenType.BRONZE;
            }
            else if (input == 2){
                screenFilter = Cinema.ScreenType.SILVER;
            }
            else if (input == 3){
                screenFilter = Cinema.ScreenType.GOLD;
            }
            filterScreenSize = false;
            displayMovies(screenFilter, cinemaFilter);
            viewMovies(screenFilter, cinemaFilter);
        }
    }

    /**
     * Turns a string to an int, -1 if error
     * @param s the string
     * @return the string's value as an int
     */
    public static int getIntFromString(String s){
        try{
            return Integer.parseInt(s);
        } catch (Exception e){
            return -1;
        }
    }

    private String printShowingInfo(Showing showing){
        Cinema cinema = null;
        Movie movie = null;
        StringBuilder builder = new StringBuilder();

        for(Cinema cinema1:this.cinemas){
            if(cinema1.getCinemaID()==showing.getCinemaID()) cinema = cinema1;
        }
        for(Movie m:this.movies){
            if(m.getID() == showing.getID())movie = m;
        }

        System.out.print(showing.getTime() + " ");
        builder.append(showing.getTime()).append(" ");
        assert movie != null;
        System.out.print(movie.getName() + " ");
        builder.append(movie.getName()).append(" ");
        assert cinema != null;
        System.out.println(cinema.getCinemaName());
        builder.append(cinema.getCinemaName());
        builder.append("\n");
        return builder.toString();
    }

    private void writeShowingReport(List<Showing> showings){
        String path = App.resourcesDir + File.separator + "showingReport.csv";
        try {
            FileWriter myWriter = new FileWriter(path);

            for(Showing showing:showings){
                myWriter.write(printShowingInfo(showing));
            }
            myWriter.close();

        } catch (IOException e) {
            UI.error(String.format("Error writing %s", path), true);
        }

    }

    /**
     * Just starts the program
     * @param args String[0]
     */
    public static void main(String[] args) {
        App a = new App();
        a.mainScreen();
        System.out.println("Terminating...");
    }
}
